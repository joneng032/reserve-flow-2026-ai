<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net9.0-android;net9.0-ios;net9.0-maccatalyst</TargetFrameworks>
		<TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net9.0-windows10.0.19041.0</TargetFrameworks>
		<!-- Uncomment to also build the tizen app. You will need to install tizen by following this: https://github.com/Samsung/Tizen.NET -->
		<!-- <TargetFrameworks>$(TargetFrameworks);net9.0-tizen</TargetFrameworks> -->

		<!-- Note for MacCatalyst:
		The default runtime is maccatalyst-x64, except in Release config, in which case the default is maccatalyst-x64;maccatalyst-arm64.
		When specifying both architectures, use the plural <RuntimeIdentifiers> instead of the singular <RuntimeIdentifier>.
		The Mac App Store will NOT accept apps with ONLY maccatalyst-arm64 indicated;
		either BOTH runtimes must be indicated or ONLY macatalyst-x64. -->
		<!-- For example: <RuntimeIdentifiers>maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers> -->

		<OutputType>Exe</OutputType>
		<RootNamespace>reserve_flow_ai_2026</RootNamespace>
		<UseMaui>true</UseMaui>
		<SingleProject>true</SingleProject>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<!-- Prevent SDK from auto-generating assembly attributes here to avoid duplicate-attribute errors
		     when building the multi-target MAUI single-project solution. Assembly attributes will be
		     produced by a single project (e.g., ReserveFlow.Core) or can be provided centrally if needed. -->
		<GenerateAssemblyInfo>false</GenerateAssemblyInfo>
		<!-- Also avoid emitting TargetFrameworkAttribute from the MAUI multi-target build so that
		     only the canonical project (ReserveFlow.Core) supplies assembly-level attributes. -->
		<GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>

		<!-- Display name -->
		<ApplicationTitle>reserve flow ai 2026</ApplicationTitle>

		<!-- App Identifier -->
		<ApplicationId>com.companyname.reserveflowai2026</ApplicationId>

		<!-- Versions -->
		<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
		<ApplicationVersion>1</ApplicationVersion>

		<!-- To develop, package, and publish an app to the Microsoft Store, see: https://aka.ms/MauiTemplateUnpackaged -->
		<WindowsPackageType>None</WindowsPackageType>

		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">15.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">15.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">21.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
		<TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>
	</PropertyGroup>

	<ItemGroup>
		<!-- App Icon -->
		<MauiIcon Include="Resources\AppIcon\appicon.svg" ForegroundFile="Resources\AppIcon\appiconfg.svg" Color="#512BD4" />

		<!-- Splash Screen -->
		<MauiSplashScreen Include="Resources\Splash\splash.svg" Color="#512BD4" BaseSize="128,128" />

		<!-- Images -->
		<MauiImage Include="Resources\Images\*" />
		<MauiImage Update="Resources\Images\dotnet_bot.png" Resize="True" BaseSize="300,185" />

		<!-- Custom Fonts -->
		<MauiFont Include="Resources\Fonts\*" />

		<!-- Raw Assets (also remove the "Resources\Raw" prefix) -->
		<MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
	</ItemGroup>

	<!-- Utility target for auditing what files the MAUI single-project glob brings into
		 the MAUI project's Compile items. Run with:
		 dotnet msbuild "$(MSBuildProjectFullPath)" -t:ListCompileItems
	  or
		 dotnet build -t:ListCompileItems

	 This will print each Compile item to the console and write a file to
	 obj\compile_items_<TargetFramework>.txt for easy inspection. Useful to
	 quickly catch accidental double-includes (e.g., other projects' sources or
	 obj-generated files).

	 NOTE: When MSBuild invokes a project-level target without a specific
	 TargetFramework (e.g., certain solution-level orchestration),
	 '$(TargetFramework)' can be empty which previously produced a
	 root-level file named compile_items_.txt. That file is meaningless and
	 caused CI validation failures. The changes below add guards so that the
	 audit file is only written when a TargetFramework is present and when
	 there are Compile items to write. -->
	<Target Name="ListCompileItems" DependsOnTargets="Build">
		<Message Text="--- Compile items for $(MSBuildProjectName) (TargetFramework=$(TargetFramework)) ---" Importance="High" />
		<!-- Remove any previously-created root-level placeholder file that has an empty TFM
			 because earlier invocations (or earlier tooling) may have left it behind
			 and CI validation should not fail on that stale artifact. -->
		<Delete Files="$(IntermediateOutputPath)compile_items_.txt" Condition="Exists('$(IntermediateOutputPath)compile_items_.txt')" />
		<!-- Print each Compile item to console when present -->
		<Message Text="Compile: %(Compile.Identity)" Importance="High" Condition="@(Compile) != '' AND '$(TargetFramework)' != ''" />
		<Message Text="No Compile items found" Importance="High" Condition="@(Compile) == '' AND '$(TargetFramework)' != ''" />
		<!-- Only write a compile items file when we have a TFM and there are compile items -->
		<WriteLinesToFile
			File="$(IntermediateOutputPath)compile_items_$(TargetFramework).txt"
			Lines="@(Compile)"
			Overwrite="true"
			Encoding="UTF-8"
			Condition="@(Compile) != '' AND '$(TargetFramework)' != ''" />
		<Message Text="Written compile items to: $(IntermediateOutputPath)compile_items_$(TargetFramework).txt" Importance="High" Condition="@(Compile) != '' AND '$(TargetFramework)' != ''" />
	</Target>

	<ItemGroup>
		<PackageReference Include="Microsoft.Maui.Controls" Version="$(MauiVersion)" />
		<PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="9.0.8" />
		<!-- Windows-only dependencies for prototype -->
		<PackageReference Include="NAudio" Version="2.2.1" />
		<PackageReference Include="sqlite-net-pcl" Version="1.8.116" />
		<!-- Pin SQLite native bundle to ensure e_sqlite3 native assets are resolved during restore/publish -->
		<PackageReference Include="SQLitePCLRaw.bundle_e_sqlite3" Version="2.0.4" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="src\ReserveFlow.Core\ReserveFlow.Core.csproj" />
	</ItemGroup>

	<!-- Exclude test projects and their generated obj/bin files from the MAUI single-project globbing.
	     SingleProject MAUI projects use a broad glob ("**/*.cs") from the repo root which can accidentally
	     pick up other projects' source and generated files (tests/*/obj/**). That leads to duplicate
	     assembly attributes and type conflicts during multi-target builds. Remove test sources from
	     the MAUI project's Compile item list to prevent cross-project inclusion. -->
	<ItemGroup>
		<Compile Remove="tests\**\*.cs" />
		<None Remove="tests\**\*" />

		<!-- Prevent the MAUI single-project broad globs from also picking up the
		     ReserveFlow.Core project's source files. The MAUI SingleProject mode
		     implicitly includes "**/*.cs" from the repo; since ReserveFlow.Core is
		     referenced as a ProjectReference, we must ensure its sources are not
		     compiled into the MAUI project as well, which causes CS0436 duplicate
		     type definition warnings. Remove only the Core project's folder here. -->
		<Compile Remove="src\ReserveFlow.Core\**\*.cs" />
		<None Remove="src\ReserveFlow.Core\**\*" />
	</ItemGroup>

</Project>
