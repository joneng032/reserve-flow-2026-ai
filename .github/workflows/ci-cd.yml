name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "18"

jobs:
  # Quality Gates
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Security audit
        run: npm audit --audit-level moderate

      - name: Accessibility check
        run: npm run test:accessibility

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: test-results/

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: e2e-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run custom performance monitoring
        run: npm run performance:monitor

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: |
            performance-baseline.json
            performance-report.json

      - name: Check performance regression
        run: |
          # Check if performance baseline exists
          if [ -f "performance-baseline.json" ]; then
            echo "Performance baseline found. Checking for regressions..."

            # Extract key metrics
            BUILD_TIME=$(jq -r '.metrics.build.buildTime' performance-baseline.json)
            BUNDLE_SIZE=$(jq -r '.metrics.build.bundleSize' performance-baseline.json)

            # Set acceptable thresholds (adjust as needed)
            MAX_BUILD_TIME=45000  # 45 seconds
            MAX_BUNDLE_SIZE=10000000  # 10MB

            if [ "$BUILD_TIME" -gt "$MAX_BUILD_TIME" ]; then
              echo "❌ Build time regression detected: ${BUILD_TIME}ms (threshold: ${MAX_BUILD_TIME}ms)"
              echo "build_time_regression=true" >> $GITHUB_ENV
            else
              echo "✅ Build time within acceptable range: ${BUILD_TIME}ms"
            fi

            if [ "$BUNDLE_SIZE" -gt "$MAX_BUNDLE_SIZE" ]; then
              echo "❌ Bundle size regression detected: ${BUNDLE_SIZE} bytes (threshold: ${MAX_BUNDLE_SIZE} bytes)"
              echo "bundle_size_regression=true" >> $GITHUB_ENV
            else
              echo "✅ Bundle size within acceptable range: ${BUNDLE_SIZE} bytes"
            fi
          else
            echo "No performance baseline found. This is expected for the first run."
          fi

      - name: Fail on performance regression
        if: env.build_time_regression == 'true' || env.bundle_size_regression == 'true'
        run: |
          echo "Performance regression detected! Failing the build."
          echo "Build Time: $(jq -r '.metrics.build.buildTime' performance-baseline.json)ms"
          echo "Bundle Size: $(jq -r '.metrics.build.bundleSize' performance-baseline.json) bytes"
          exit 1

      - name: Run Lighthouse CI
        run: npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Visual Regression Tests
  visual-regression:
    runs-on: ubuntu-latest
    needs: performance-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run visual regression tests
        run: npm run test:visual

      - name: Upload visual diffs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-regression-diffs
          path: test-results/visual-diffs/

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "Reserve Flow"
          path: "."
          format: "ALL"

      - name: Upload dependency check results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-check-report
          path: reports/

  # Build and Deploy (only on main branch)
  build-and-deploy:
    runs-on: ubuntu-latest
    needs:
      [
        unit-tests,
        integration-tests,
        e2e-tests,
        performance-tests,
        visual-regression,
        security-scan,
      ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_ENVIRONMENT: production

      - name: Run build tests
        run: npm run test:build

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: rsync, docker push, etc.

      - name: Run smoke tests on staging
        run: npm run test:smoke
        env:
          TEST_ENVIRONMENT: staging

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: blue-green deployment, canary release, etc.

      - name: Run production smoke tests
        run: npm run test:smoke
        env:
          TEST_ENVIRONMENT: production

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            ## Changes
            - Automated deployment completed
            - All quality gates passed
            - Security scans completed
            - Performance benchmarks met
          draft: false
          prerelease: false

  # Rollback (manual trigger)
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback deployment
        run: |
          echo "Rolling back to previous version..."
          # Add rollback commands here
          # Example: deploy previous docker image, git revert, etc.

      - name: Verify rollback
        run: npm run test:smoke
        env:
          TEST_ENVIRONMENT: production

  # Dependency Updates
  dependency-updates:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Update dependencies
        run: npm update

      - name: Run tests after update
        run: npm run test:unit

      - name: Create pull request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies"
          title: "Automated Dependency Updates"
          body: |
            ## Automated Dependency Updates

            This PR updates project dependencies to their latest versions.

            ### Changes
            - Updated all dependencies to latest versions
            - Ran unit tests to ensure compatibility
            - Please review for any breaking changes

            ### Testing
            - ✅ Unit tests pass
            - 🔄 Integration tests pending
            - 🔄 E2E tests pending
          branch: automated/dependency-updates
          delete-branch: true
